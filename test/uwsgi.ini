[uwsgi]

# 在失去权限前，使用chdir()到指定目录
# chdir = /opt/report/dimension_report

#application's base folder
base = /opt/report/dimension_report

# 为python程序设置指定的虚拟环境变量
home = /opt/report/venv


# 给PYTHONPATH 增加一个目录
pythonpath = %(base)

# 加载指定的python WSGI模块（模块路径必须在PYTHONPATH里）
module = api.api_listener
app = api.api_listener

# 设置在收到请求时，uWSGI加载的模块中哪个变量将被调用，默认是名字为“application”的变量。
callable = app

# 加载指定的WSGI文件
# wsgi-file = myproject/wsgi.py


# 绑定到ipv4地址127.0.0.1的3031端口以及unix:///%nsock文件。
master = true
emperor = true
socket = %(base)/%n.sock
socket = 127.0.0.1:8000

#permissions for the socket file
chmod-socket = 644

#the variable that holds a flask application inside the module imported at line #6


#location of log files
logto = /var/log/uwsgi/%n.log

# 使进程在后台运行，并将日志打到指定的日志文件或者udp服务器
# daemonize = /var/log/uwsgi/%n.log

# 每一个工作进程都等同于一个系统进程，它消耗内存，所以需要小心设置工作进程的数量。如果你设置的数量太多，就有可能是系统崩溃。
workers=16
enable-threads=true
threads = 20


gevent = 100
gevent-monkey-patch = true

stats = 127.0.0.1:9191

# 设置在平滑的重启（直到接收到的请求处理完才重启）一个工作子进程中，等待这个工作结束的最长秒数。
reload-mercy = 8

# 为每个工作进程设置请求数的上限。当一个工作进程处理的请求数达到这个值，那么该工作进程就会被回收重用（重启）
max-requests = 10000

# 为所有的socket操作设置内部超时时间
socket-timeout = 30

async = 30
ugreen = true
vacuum = true
